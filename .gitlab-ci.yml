image: docker:latest

services:
  - docker:dind

stages:
  - setup
  - build
  - deploy

variables:
  PROJECT_ID: $GCLOUD_PROJECT_ID
  GOOGLE_APPLICATION_CREDENTIALS: $CI_PROJECT_DIR/gcloud-service-key.json
  DOCKER_DRIVER: overlay2

before_script:
  # Install Google Cloud SDK
  - apk --no-cache add curl python3 py3-crcmod bash
  - curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-367.0.0-linux-x86_64.tar.gz
  - tar -zxvf google-cloud-sdk-367.0.0-linux-x86_64.tar.gz
  - ./google-cloud-sdk/install.sh -q
  - ./google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY_FILE
  - ./google-cloud-sdk/bin/gcloud config set project $PROJECT_ID
  - ./google-cloud-sdk/bin/gcloud auth configure-docker

setup:
  stage: setup
  script:
    - ./google-cloud-sdk/bin/gcloud services enable containerregistry.googleapis.com
    - ./google-cloud-sdk/bin/gcloud services enable run.googleapis.com
    - ./google-cloud-sdk/bin/gcloud services enable cloudbuild.googleapis.com
    - ./google-cloud-sdk/bin/gcloud services enable deploymentmanager.googleapis.com

build:
  stage: build
  script:
    - cd frontend
    - docker build -t gcr.io/$PROJECT_ID/serverless-frontend:latest .
    - docker push gcr.io/$PROJECT_ID/serverless-frontend:latest
  after_script:
    - docker system prune -f
    - docker image prune -f

deploy:
  stage: deploy
  script:
    - cd infra
    - ./google-cloud-sdk/bin/gcloud builds submit --region=us-central1 --config frontend_cloudbuild.yml
    - ./google-cloud-sdk/bin/gcloud beta run services add-iam-policy-binding serverless-frontend --region=us-central1 --member=allUsers --role=roles/run.invoker
  environment:
    name: production
    url: https://gcr.io/$PROJECT_ID/serverless-frontend
  only:
    - main
  after_script:
    - docker system prune -f
    - docker image prune -f
