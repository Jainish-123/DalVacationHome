AWSTemplateFormatVersion: '2010-09-09'

Resources:

  QueriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: queries
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S        
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 

  CustomerQueriesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CustomerQueriesLambdaFunction
      Handler: index.handler
      Role: arn:aws:iam::446702963770:role/LabRole
      Runtime: nodejs18.x
      Timeout: 30
      Code:
        S3Bucket: serverless-project-code
        S3Key: customer_queries.zip

  AgentQueriesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AgentQueriesLambdaFunction
      Handler: index.handler
      Role: arn:aws:iam::446702963770:role/LabRole
      Runtime: nodejs18.x
      Timeout: 30
      Code:
        S3Bucket: serverless-project-code
        S3Key: agent_queries.zip
        
        
  QueriesApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: queries-api
      Description: API Gateway for querying customer and agent queries

  CustomerQueriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt QueriesApi.RootResourceId
      PathPart: customer-queries
      RestApiId: !Ref QueriesApi

  CustomerQueriesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref CustomerQueriesResource
      RestApiId: !Ref QueriesApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomerQueriesLambdaFunction.Arn}/invocations
      RequestParameters:
        method.request.path.customerId: true
  
  AgentQueriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt QueriesApi.RootResourceId
      PathPart: agent-queries
      RestApiId: !Ref QueriesApi

  AgentQueriesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref AgentQueriesResource
      RestApiId: !Ref QueriesApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentQueriesLambdaFunction.Arn}/invocations
      RequestParameters:
        method.request.path.agentId: true

  QueriesApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref QueriesApi
      StageName: prod
    DependsOn: 
      - CustomerQueriesMethod
      - AgentQueriesMethod

  CustomerQueriesLambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CustomerQueriesLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QueriesApi}/*/GET/customer-queries

  AgentQueriesLambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AgentQueriesLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QueriesApi}/*/GET/agent-queries


Outputs:
  QueriesApi:
    Value: !Ref QueriesApi
    Description: API Gateway RestApi ID
